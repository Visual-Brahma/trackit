// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator kysely {
  provider    = "prisma-kysely"
  output      = "../src/types"
  fileName    = "database.types.ts"
  readOnlyIds = true
  // enumFileName = "enums.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ------------------------------------- User --------------------------------------

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  email         String         @unique()
  emailVerified DateTime?
  image         String?
  newsletter    Boolean        @default(true)
  accounts      Account[]
  sessions      Session[]
  groupsJoined  GroupMember[]
  // attendance    AttendanceReportUserPresence[]
  messagesSent  Message[]
  meetingNotes  MeetingNotes[]
}

// ------------------------------------- Group -------------------------------------

/// The role of the user in the group
enum Role {
  OWNER
  ADMIN
  MEMBER
}

/// A group represents a workspace in business context and class or its sub-unit in educational context
model Group {
  id                 String        @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  description        String?
  banner             String?
  joinCode           String        @unique @default(dbgenerated("gen_random_uuid()"))
  isAcceptingMembers Boolean       @default(true)
  isDefault          Boolean       @default(false) /// true, if the group was creating automatically on user signup
  groupMembers       GroupMember[]
  meetings           Meeting[]
  messages           Message[]
}

/// A user can be a member of multiple groups and can have different roles in each group
model GroupMember {
  id      Int    @id @default(autoincrement())
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
  role    Role   @default(MEMBER)
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([groupId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamptz(3)
  message   Json
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// ------------------------------------- Meeting -------------------------------------

/// Supported Meeting Platforms

enum MeetingPlatform {
  GOOGLE_MEET
}

/// A meeting or a class can be online or offline
model Meeting {
  id                 Int                @id @default(autoincrement())
  group              Group              @relation(fields: [groupId], references: [id])
  groupId            String
  date               DateTime           @db.Timestamptz(3)
  isOnline           Boolean            @default(true)
  name               String
  meetLink           String?
  meetPlatform       MeetingPlatform?
  startTime          DateTime?          @db.Timestamptz(3)
  endTime            DateTime?          @db.Timestamptz(3)
  venue              String?
  agenda             Json?
  // isRecurring        Boolean            @default(false)
  recurredMeetings   Meeting[]          @relation(name: "recurring_meeting_instances")
  recurringMeeting   Meeting?           @relation(name: "recurring_meeting_instances", fields: [recurringMeetingId], references: [id], onDelete: SetNull)
  recurringMeetingId Int?
  attendanceReport   AttendanceReport[]
  notes              MeetingNotes[]
}

model AttendanceReport {
  id              Int      @id @default(autoincrement())
  slug            String   @unique() @default(dbgenerated("gen_random_uuid()"))
  meeting         Meeting  @relation(fields: [meetingId], references: [id])
  meetingId       Int      @unique()
  isPublic        Boolean  @default(false)
  sharedWith      String[] @default([])
  // membersPresence AttendanceReportUserPresence[]
  membersPresence Json     @default("[]")
}

// model AttendanceReportUserPresence {
//   id                 Int              @id @default(autoincrement())
//   attendanceReport   AttendanceReport @relation(fields: [attendanceReportId], references: [id])
//   attendanceReportId Int
//   user               User             @relation(fields: [userId], references: [id])
//   userId             String
//   isPresent          Boolean          @default(false)
//   joinTime           DateTime         @db.Timestamptz(3)
//   leaveTime          DateTime         @db.Timestamptz(3)
//   comment            String?
//   meetingTrail       Json?
// }

// ------------------------------------- Notes -------------------------------------

model MeetingNotes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  content   Json
  isPrivate Boolean  @default(true)
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  meetingId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

// ------------------------------------- Auth -------------------------------------
model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
